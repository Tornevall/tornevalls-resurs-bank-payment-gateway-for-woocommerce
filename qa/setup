#!/bin/sh -eu

if [ ! -d .git/hooks ]; then
  echo "Error: Please run this script from the root of the repository."
  exit 1;
fi

# Resolve PHP cmd.
dockerCmd=""
phpService=""
phpCmd=""

read -p "Enter absolute path to module directory (wp-content/plugins/resursbank-woocommerce) within PHP container (no trailing slash): " dir
read -p "Running PHP in Docker (y/n)?" localPhp
case "$localPhp" in
  y|Y ) read -p "Enter name of docker compose command (eg. docker compose or docker-compose): " dockerCmd; read -p "Enter name of php server (eg. php or phpfpm): " phpService; phpCmd="${dockerCmd} exec -w ${dir} -T ${phpService}";;
  n|N ) read -p "Enter name of/path to php binary (eg. php): " php;;
  * ) echo "Invalid response."; exit 1;;
esac

if [ ! -d ./qa/bin ]; then
  mkdir -p ./qa/bin
fi

if [ ! -d ./qa/psalm/cache ]; then
  mkdir ./qa/psalm/cache
fi

if [ ! -f ./qa/php-cs-fixer/.php-cs-fixer.cache ]; then
  mkdir -p ./qa/php-cs-fixer
  touch ./qa/php-cs-fixer/.php-cs-fixer.cache
fi

# Install Composer if it's not already available.
if [ ! -f ./qa/bin/composer ]; then
  echo ""
  echo ""
  echo "--==( Installing Composer )==--"
  echo ""
  curl -L https://github.com/composer/composer/releases/download/2.4.2/composer.phar -o ./qa/bin/composer
  echo ""
  echo ""
fi

echo ""
echo ""
echo "--==( Setting up git pre-commit hook )==--"
echo ""
echo ""

# Create git pre-commit hook file.
HOOK_FILE=".git/hooks/pre-commit"

if [ -f $HOOK_FILE ]; then
  rm -f $HOOK_FILE
fi

touch $HOOK_FILE
chmod +x $HOOK_FILE

cat <<EOT >> $HOOK_FILE
#!/usr/bin/env -S bash -eu

echo "=========================================================="
echo "Running tests."
echo ""
echo "---==( Executing Psalm tests. )==---"
echo ""
$phpCmd $dir/vendor/bin/psalm -c $dir/qa/psalm/psalm.xml --show-info=true
echo ""
echo "---==( Executing PHPMD tests on source files. )==---"
echo ""
$phpCmd $dir/vendor/bin/phpmd $dir/src text $dir/qa/phpmd/src.xml
echo ""
echo "---==( Executing PHP CBF for source files. )==---"
echo ""
$phpCmd $dir/vendor/bin/phpcbf --standard=PSR12 --ignore=Service/,ResursBank/,Gateway/,Module/ $dir/src
echo ""
$phpCmd $dir/vendor/bin/phpcbf --standard=qa/phpcs/ruleset.xml --ignore=Service/,ResursBank/,Gateway/,Module/,Exception/ $dir/src
echo ""
echo "---==( Executing PHPCS for source files. )==---"
echo ""
$phpCmd $dir/vendor/bin/phpcs --standard=PSR12 --ignore=Service/,ResursBank/,Gateway/,Module/ $dir/src
echo ""
$phpCmd $dir/vendor/bin/phpcs --standard=qa/phpcs/ruleset.xml --ignore=Service/,ResursBank/,Gateway/,Module/,Exception/ $dir/src
echo ""
echo "---==( Executing PHPStan for source files. )==---"
echo ""
$phpCmd $dir/vendor/bin/phpstan analyse -c $dir/qa/phpstan/src.neon -a $dir/autoload.php $dir/src
echo ""
echo "---==( Executing PHP CS Fixer for source files. )==---"
echo ""
$phpCmd $dir/vendor/bin/php-cs-fixer --cache-file=$dir/qa/php-cs-fixer/.php-cs-fixer.cache --config=$dir/qa/php-cs-fixer/.php-cs-fixer.dist.php fix
EOT

echo ""
echo ""
echo "--==( Setting up QA tools )==--"
echo ""
echo ""

# Create composer.json file for QA tools.
if [ -f ./composer.json ]; then
  rm -f ./composer.json
fi

if [ -f ./composer.lock ]; then
  rm -f ./composer.lock
fi

touch ./composer.json

cat <<EOT >> ./composer.json
{
  "require-dev": {
    "phpunit/phpunit": "^9",
    "phpmd/phpmd": "^2",
    "squizlabs/php_codesniffer": "^3",
    "friendsofphp/php-cs-fixer": "^3",
    "vimeo/psalm": "^4",
    "phpstan/phpstan": "^1",
    "slevomat/coding-standard": "~8.0"
  },
  "require": {
    "php": "8.1.*",
    "ext-curl": "*"
  },
   "config": {
     "allow-plugins": {
       "dealerdirect/phpcodesniffer-composer-installer": true
     }
   }
}
EOT

# Install composer packages for QA tools.
$phpCmd $dir/qa/bin/composer install

echo OK
exit 0
